
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/R
> ## Senan Hogan-Hennessy, 21 December 2021
> ## Build IPEDS data with the Urban Inst's package
> print(Sys.time())
[1] "2024-02-23 12:05:10 EST"
> ## https://educationdata.urban.org/documentation/colleges.html
> ## https://urbaninstitute.github.io/education-data-package-r/
> library(tidyverse) ## functions for data manipulation and visualization
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.2     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.2     ✔ tibble    3.2.1
✔ lubridate 1.9.2     ✔ tidyr     1.3.0
✔ purrr     1.0.1     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> set.seed(47)
> 
> 
> # Load data --------------------------------------------------------------------
> 
> # Directory info for each uni
> directory.data <- read_csv("../../data/urban-ipeds/raw-data/colleges_ipeds_directory.csv")
Rows: 318274 Columns: 82
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (21): opeid, inst_name, inst_alias, address, state_abbr, zip, city, coun...
dbl (61): unitid, year, fips, phone_number, county_fips, region, urban_centr...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
Warning message:
One or more parsing issues, call `problems()` on your data frame for details,
e.g.:
  dat <- vroom(...)
  problems(dat) 
> 
> # University level finances
> finance.data <- read_csv("../../data/urban-ipeds/raw-data/colleges_ipeds_finance.csv") %>%
+     # Include Supplementary finances for 2018-2020
+     bind_rows(read_csv(
+         "../../data/urban-ipeds/raw-data/finance/ipeds-finance-20182020.csv"))
Rows: 227084 Columns: 141
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (141): unitid, year, fips, rev_tuition_fees_gross, rev_tuition_fees_net,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
Rows: 18273 Columns: 17
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (17): unitid, year, exp_instruc_total, exp_research_total, exp_pub_serv_...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> # Urban admissions data (available 2001--)
> admissions.data <- read_csv("../../data/urban-ipeds/raw-data/colleges_ipeds_admissions-enrollment.csv")
Rows: 175590 Columns: 9
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (9): unitid, year, fips, sex, number_applied, number_admitted, number_en...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> # Urban data on graduation rates (available 1996--)
> graduation150.data <- read_csv("../../data/urban-ipeds/raw-data/colleges_ipeds_grad-rates.csv")
Rows: 4375225 Columns: 18
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (18): unitid, year, fips, cohort_year, institution_level, subcohort, rac...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> # Urban data on faculty.
> urban_salaries.data <- read_csv("../../data/urban-ipeds/raw-data/colleges_ipeds_salaries_is.csv")
Rows: 5712350 Columns: 11
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (11): year, unitid, fips, academic_rank, contract_length, sex, instruc_s...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> # University enrollment (hand made from raw IPEDS values)
> enrollment.data <- read_csv("../../data/urban-ipeds/raw-data/enrollment/ipeds-enrollment.csv")
Rows: 248443 Columns: 4
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (4): unitid, year, enrollment_reported, enrollment_fte

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> # Professors' salaries (hand made from raw IPEDS values)
> salaries.data <- read_csv("../../data/urban-ipeds/raw-data/faculty/ipeds-salaries.csv")
Rows: 141318 Columns: 37
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (37): unitid, year, full9month_prof_count, assoc9month_prof_count, assis...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> # Professors' faculty data (hand made from raw IPEDS values)
> tenure.data <- read_csv("../../data/urban-ipeds/raw-data/faculty/ipeds-tenure.csv")
Rows: 36461 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): unitid, year, notenure9month_prof_count, tenuretrack9month_prof_co...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> # Employee part- + full-time data (hand made from raw IPEDS values)
> parttime.data <- read_csv("../../data/urban-ipeds/raw-data/parttime-employees/ipeds-parttime.csv")
Rows: 136923 Columns: 12
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (12): unitid, year, fulltime_tenured_count, fulltime_tenuretrack_count, ...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> # CPI-U from FREDS (since Urban provided cpi has missing years)
> # Yearly average, seasonally adjusted, base year 1982-1984=100
> # https://fred.stlouisfed.org/series/CPIAUCSL
> cpiu.data <- read_csv("../../data/inflation-indices/freds-cpiu.csv")
Rows: 75 Columns: 2
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl  (1): CPIAUCSL
date (1): DATE

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> 
> # Clean data -----------------------------------------------------------------
> 
> # Keep releveant directory info
> directory.data <- directory.data %>%
+     transmute(unitid = unitid,
+         year = year,
+         inst_name = inst_name,
+         state = state_abbr,
+         public = as.integer(inst_control == 1),
+         forprofit = as.integer(inst_control == 3),
+         fouryear = as.integer(institution_level == 4),
+         associatescollege = as.integer(inst_category == 4 | inst_category == 6))
> 
> # Clean CPI data, and put in terms of base year 2021
> base.year <- 2021
> base.index <- cpiu.data %>%
+     filter(base.year ==
+         (DATE %>% substr(start = 0, stop = 4) %>% as.integer())) %>%
+     pull(CPIAUCSL)
> cpiu.data <- cpiu.data %>%
+     transmute(
+         year = DATE %>% substr(start = 0, stop = 4) %>% as.integer(),
+         cpi2021 = CPIAUCSL / base.index)
> 
> # Keep relevant finance data
> finance.data <- finance.data %>%
+     # Bring in years of the CPI-U, base year 2021
+     left_join(cpiu.data, by = "year") %>%
+     # Keep state finances, and make real
+     transmute(
+         unitid = unitid,
+         year = year,
+         cpi2021 = cpi2021,
+         # Federal appropriations
+         fedappropriations_real = replace(rev_appropriations_fed,
+             rev_appropriations_fed < 0, NA) / cpi2021,
+         # State Gov. appropriations
+         stateappropriations_real = replace(rev_appropriations_state,
+             rev_appropriations_state < 0, NA) / cpi2021,
+         # State and local grants
+         statelocal_funding_real = replace(rev_state_local_approps_grants,
+             rev_state_local_approps_grants < 0, NA),
+         # Local appropriations
+         localappropriations_real = (
+             replace(rev_appropriations_local, is.na(rev_appropriations_local), 0) +
+             replace(rev_grants_contracts_local, is.na(rev_grants_contracts_local), 0)
+             ) / cpi2021,
+         # Tuition (+ fees) revenue
+         tuitionrev_real = replace(rev_tuition_fees_gross,
+             rev_tuition_fees_gross < 0, NA) / cpi2021,
+         # All revenues (including tuition + appropriations)
+         totalrevenues_real = replace(rev_total_current,
+             rev_total_current < 0, NA) / cpi2021,
+         # Non-aux revenues (including tuition + appropriations)
+         nonauxrevenues_real = (
+             ifelse(is.na(fedappropriations_real), 0, fedappropriations_real) +
+             ifelse(is.na(stateappropriations_real), 0, stateappropriations_real) +
+             ifelse(is.na(localappropriations_real), 0, localappropriations_real) +
+             ifelse(is.na(tuitionrev_real), 0, tuitionrev_real)),
+         # Revenues from gifts and philanthropy.
+         # Expenditures on research
+         researchspending_total_real = replace(exp_research_total,
+             exp_research_total < 0, NA) / cpi2021,
+         # Salary Expenditures on research
+         researchspending_salaries_real = replace(exp_research_salaries,
+             exp_research_salaries < 0, NA) / cpi2021,
+         # Expenditures on instruction
+         instructionspending_total_real = replace(exp_instruc_total,
+             exp_instruc_total < 0, NA) / cpi2021,
+         # Salary Expenditures on instruction
+         instructionspending_salaries_real = replace(exp_instruc_salaries,
+             exp_instruc_salaries < 0, NA) / cpi2021,
+         exp_instruc_real = replace(exp_instruc_total,
+             is.na(exp_instruc_total) | exp_instruc_total < 0, NA) / cpi2021,
+         exp_research_real = replace(exp_research_total,
+             is.na(exp_research_total) | exp_research_total < 0, NA) / cpi2021,
+         exp_pub_serv_real = replace(exp_pub_serv_total,
+             is.na(exp_pub_serv_total) | exp_pub_serv_total < 0, NA) / cpi2021,
+         exp_student_serv_real = replace(exp_student_serv_total,
+             is.na(exp_student_serv_total) | exp_student_serv_total < 0, NA) / cpi2021,
+         exp_acad_supp_real = replace(exp_acad_supp_total,
+             is.na(exp_acad_supp_total) | exp_acad_supp_total < 0, NA) / cpi2021,
+         exp_inst_supp_real = replace(exp_inst_supp_total,
+             is.na(exp_inst_supp_total) | exp_inst_supp_total < 0, NA) / cpi2021,
+         exp_opm_areal = replace(exp_total_opm,
+             is.na(exp_total_opm) | exp_total_opm < 0, NA) / cpi2021,
+         exp_net_grant_aid_real = replace(exp_net_grant_aid_total,
+             is.na(exp_net_grant_aid_total) | exp_net_grant_aid_total < 0, NA) / cpi2021,
+         nonauxspending_real = (exp_instruc_real +
+             exp_research_real +
+             exp_pub_serv_real +
+             exp_student_serv_real +
+             exp_acad_supp_real +
+             exp_inst_supp_real +
+             exp_opm_areal +
+             exp_net_grant_aid_real)) %>%
+     # Replace missings
+     mutate(
+         nonauxrevenues_real =
+             replace(nonauxrevenues_real, nonauxrevenues_real < 0, NA),
+         nonauxspending_real =
+             replace(nonauxspending_real, nonauxspending_real < 0, NA)) %>%
+     # Finance data only reliable after 1987
+     filter(year >= 1987)
> 
> # Clean Urban faculty data, with the definition found above.
> urban_faculty.data <- urban_salaries.data %>%
+     filter(sex != 99, academic_rank != 99,
+         contract_length != 99, contract_length != 13) %>%
+     # SUmm num of professors
+     group_by(unitid, year) %>%
+     summarise(
+         urban_lecturer_prof_count  = sum(as.integer(academic_rank %in% 4:5) * instruc_staff_count, na.rm = TRUE),
+         urban_assistant_prof_count = sum(as.integer(academic_rank == 3) * instruc_staff_count, na.rm = TRUE),
+         urban_full_prof_count      = sum(as.integer(academic_rank %in% 1:2) * instruc_staff_count, na.rm = TRUE),
+         urban_all_prof_count       = sum(as.integer(academic_rank %in% 1:5) * instruc_staff_count, na.rm = TRUE))
`summarise()` has grouped output by 'unitid'. You can override using the
`.groups` argument.
> 
> # Generate university-year data on the admissions rate, by collapsing
> admissions.data <- admissions.data %>%
+     filter(sex == 99, !is.na(number_applied)) %>%
+     transmute(unitid = unitid,
+         year = year,
+         acceptance_rate =
+             ifelse(number_admitted > 0, number_admitted / number_applied, NA))
> # Generate university-year data on the graduation rate
> graduation150.data <- graduation150.data %>%
+     filter(year == cohort_year + 5,
+         subcohort == 2,
+         race == 99,
+         sex == 99) %>%
+     select(unitid, year, completion_rate_150pct)
> 
> # SHow that these data are only available for more recent years:
> admissions.data %>% pull(year) %>% table(exclude = NULL) %>% print()
.
2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 
2484 6823 2939 2831 2855 2903 2898 2849 2810 2332 2376 2355 2260 2236 2212 2069 
2017 2018 2019 
2075 2039 2011 
> graduation150.data %>% pull(year) %>% table(exclude = NULL) %>% print()
.
1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 
1452 1533 1577 1416 1494 1846 1868 1887 1937 1953 2022 2064 2091 2136 2167 2183 
2012 2013 2014 2015 2016 2017 
2208 2212 2222 2185 2140 2089 
> 
> # Generate tenure data from hand-created file.
> tenure.data <- tenure.data %>%
+     # Generate professor count for each category of tenure.
+     transmute(unitid = unitid,
+         year = year,
+         # Total profs employed
+         nontenured_tenure_count =
+             notenure9month_prof_count + notenure12month_prof_count,
+         tenuretrack_tenure_count =
+             tenuretrack9month_prof_count + tenuretrack12month_prof_count,
+         tenured_tenure_count =
+             tenured9month_prof_count + tenured12month_prof_count,
+         all_tenure_count =
+             total9month_prof_count + total12month_prof_count)
> 
> # Add on part-time professor values, from hand-created file.
> parttime.data <- parttime.data %>%
+     # Generate part + full-time faculty counts.
+     transmute(unitid = unitid,
+         year = year,
+         lecturer_parttime_count  = parttime_lecturer_count,
+         assistant_parttime_count = parttime_tenuretrack_count,
+         full_parttime_count      = parttime_tenured_count,
+         lecturer_fulltime_count  = fulltime_lecturer_count,
+         assistant_fulltime_count = fulltime_tenuretrack_count,
+         full_fulltime_count      = fulltime_tenured_count)
> 
> # Generate salaries data, from hand-created file.
> salaries.data <- salaries.data %>%
+     # Generate professor count (regardless of contract length)
+     transmute(unitid = unitid,
+         year = year,
+         # Total profs employed
+         lecturer_prof_count =
+             lect9month_prof_count + lect12month_prof_count +
+                 instruct9month_prof_count + instruct12month_prof_count,
+         assistant_prof_count =
+             assist9month_prof_count + assist12month_prof_count,
+         full_prof_count =
+             full9month_prof_count + assoc9month_prof_count +
+                     full12month_prof_count + assoc12month_prof_count,
+         all_prof_count =
+             total9month_prof_count + total12month_prof_count,
+         # Totals paid to profs
+         lecturer_profoutlays_nominal =
+             replace_na(lect_profoutlays_nominal, 0) +
+                 replace_na(lect9month_profoutlays_nominal, 0) +
+                     replace_na(lect12month_profoutlays_nominal, 0) +
+             replace_na(instruct_profoutlays_nominal, 0) +
+                 replace_na(instruct9month_profoutlays_nominal, 0) +
+                     replace_na(instruct12month_profoutlays_nominal, 0),
+         assistant_profoutlays_nominal =
+             replace_na(assist_profoutlays_nominal, 0) +
+                 replace_na(assist9month_profoutlays_nominal + assist12month_profoutlays_nominal, 0),
+         full_profoutlays_nominal =
+             replace_na(full_profoutlays_nominal + assoc_profoutlays_nominal, 0) +
+                 replace_na(full9month_profoutlays_nominal + assoc9month_profoutlays_nominal +
+                     full12month_profoutlays_nominal + assoc12month_profoutlays_nominal, 0),
+         all_profoutlays_nominal =
+             replace_na(total_profoutlays_nominal, 0) +
+                 replace_na(total9month_profoutlays_nominal, 0) +
+                     replace_na(total12month_profoutlays_nominal, 0)) %>%
+     # Average paid to profs
+     mutate(lecturer_profsalaries_nominal =
+             lecturer_profoutlays_nominal / lecturer_prof_count,
+         assistant_profsalaries_nominal =
+             assistant_profoutlays_nominal / assistant_prof_count,
+         full_profsalaries_nominal =
+             full_profoutlays_nominal / full_prof_count,
+         all_profsalaries_nominal =
+             all_profoutlays_nominal / all_prof_count) %>%
+     # Replace zeros with NAs after summing NAs
+     mutate(
+         lecturer_prof_count = na_if(lecturer_prof_count, 0),
+         assistant_prof_count = na_if(assistant_prof_count, 0),
+         full_prof_count = na_if(full_prof_count, 0),
+         all_prof_count = na_if(all_prof_count, 0),
+         lecturer_profoutlays_nominal = na_if(lecturer_profoutlays_nominal, 0),
+         assistant_profoutlays_nominal = na_if(assistant_profoutlays_nominal, 0),
+         full_profoutlays_nominal = na_if(full_profoutlays_nominal, 0),
+         all_profoutlays_nominal = na_if(all_profoutlays_nominal, 0),
+         lecturer_profsalaries_nominal = na_if(lecturer_profsalaries_nominal, 0),
+         assistant_profsalaries_nominal = na_if(assistant_profsalaries_nominal, 0),
+         full_profsalaries_nominal = na_if(full_profsalaries_nominal, 0),
+         all_profsalaries_nominal = na_if(all_profsalaries_nominal, 0)) %>%
+     # Adjust salaries for inflation, and compute averages
+     left_join(cpiu.data, by = "year") %>%
+     mutate(
+         # Total spent on prof salaries
+         lecturer_profoutlays_real = lecturer_profoutlays_nominal / cpi2021,
+         assistant_profoutlays_real = assistant_profoutlays_nominal / cpi2021,
+         full_profoutlays_real = full_profoutlays_nominal / cpi2021,
+         all_profoutlays_real = all_profoutlays_nominal / cpi2021,
+         # Mean real salaries
+         lecturer_profmeansalary_real = lecturer_profsalaries_nominal / cpi2021,
+         assistant_profmeansalary_real = assistant_profsalaries_nominal / cpi2021,
+         full_profmeansalary_real = full_profsalaries_nominal / cpi2021,
+         all_profmeansalary_real = all_profsalaries_nominal / cpi2021) %>%
+     # Remove the nominal values
+     select(-c(cpi2021,
+         lecturer_profoutlays_nominal, lecturer_profsalaries_nominal,
+         assistant_profoutlays_nominal, assistant_profsalaries_nominal,
+         full_profoutlays_nominal, full_profsalaries_nominal,
+         all_profoutlays_nominal, all_profsalaries_nominal))
> 
> # Combine data
> urban_ipeds.data <- directory.data %>%
+     left_join(finance.data, by = c("unitid", "year")) %>%
+     left_join(enrollment.data, by = c("unitid", "year")) %>%
+     left_join(salaries.data, by = c("unitid", "year")) %>%
+     left_join(tenure.data, by = c("unitid", "year")) %>%
+     left_join(admissions.data, by = c("unitid", "year")) %>%
+     left_join(graduation150.data, by = c("unitid", "year")) %>%
+     left_join(parttime.data, by = c("unitid", "year"))
> 
> 
> ## Calculate the shift-share instruments (see Deming Walters 2017, p.10)
> 
> # state appropriations as share of all revenues per uni, in base year 1990-3
> # + net tuition fees as a share of all revenues per uni, in base year 1990-3
> urban_ipeds.data <- urban_ipeds.data %>%
+     filter(year %in% c(1990:1993)) %>%
+     group_by(unitid) %>%
+     summarise(tuitionrev_baseshare =
+             mean(tuitionrev_real / totalrevenues_real, na.rm = TRUE),
+         staterevenues_baseshare =
+             mean(stateappropriations_real / totalrevenues_real, na.rm = TRUE)) %>%
+     ungroup() %>%
+     right_join(urban_ipeds.data, by = "unitid")
> 
> # Total state uni appropriations + number of (public) unis in the state
> shift_share.data <- urban_ipeds.data %>%
+     # Restrict to public uni's
+     filter(public == 1, forprofit == 0, fouryear == 1) %>%
+     # Restrict to unis with financial info
+     filter(!is.na(stateappropriations_real), stateappropriations_real > 0) %>%
+     # Count the entire state appropriations + tuition revenue by state
+     group_by(state, year) %>%
+     summarise(allstate_stateappropriations_real =
+             sum(stateappropriations_real, na.rm = TRUE),
+         allstate_tuitionrev_real =
+             sum(tuitionrev_real, na.rm = TRUE),
+         stateEnroll_count = sum(enrollment_reported, na.rm = TRUE),
+         stateFTE_count = sum(enrollment_fte, na.rm = TRUE),
+         stateprof_count = sum(all_prof_count, na.rm = TRUE),
+         stateuni_count = n()) %>%
+     ungroup()
`summarise()` has grouped output by 'state'. You can override using the
`.groups` argument.
> # Put back to joined data.
> urban_ipeds.data <- shift_share.data %>%
+     right_join(urban_ipeds.data, by = c("state", "year"))
> 
> # Combine for the base-year appropriations + tuition shift-share instruments
> urban_ipeds.data <- urban_ipeds.data %>%
+     mutate(
+         appropriationshock_peruni_real = staterevenues_baseshare * (
+             allstate_stateappropriations_real / stateuni_count),
+         tuitionshock_peruni_real = tuitionrev_baseshare * (
+             allstate_tuitionrev_real / stateuni_count),
+         appropriationshock_perEnroll_real = staterevenues_baseshare * (
+             allstate_stateappropriations_real / stateEnroll_count),
+         tuitionshock_perEnroll_real = tuitionrev_baseshare * (
+             allstate_tuitionrev_real / stateEnroll_count),
+         appropriationshock_perFTE_real = staterevenues_baseshare * (
+             allstate_stateappropriations_real / stateFTE_count),
+         tuitionshock_perFTE_real = tuitionrev_baseshare * (
+             allstate_tuitionrev_real / stateFTE_count))
> 
> # Reorder the variables
> urban_ipeds.data <- urban_ipeds.data %>%
+     select(
+         unitid, year, inst_name, state,
+         public, forprofit, fouryear, associatescollege, cpi2021,
+         enrollment_reported, enrollment_fte,
+         stateEnroll_count,
+         stateFTE_count,
+         stateuni_count,
+         stateprof_count,
+         allstate_stateappropriations_real,
+         staterevenues_baseshare,
+         allstate_tuitionrev_real,
+         tuitionrev_baseshare,
+         totalrevenues_real,
+         nonauxrevenues_real,
+         exp_instruc_real,
+         exp_research_real,
+         exp_pub_serv_real,
+         exp_student_serv_real,
+         exp_acad_supp_real,
+         exp_inst_supp_real,
+         exp_opm_areal,
+         exp_net_grant_aid_real,
+         nonauxspending_real,
+         instructionspending_total_real,
+         instructionspending_salaries_real,
+         researchspending_total_real,
+         researchspending_salaries_real,
+         fedappropriations_real,
+         stateappropriations_real,
+         localappropriations_real,
+         statelocal_funding_real,
+         tuitionrev_real,
+         appropriationshock_peruni_real,
+         tuitionshock_peruni_real,
+         appropriationshock_perEnroll_real,
+         tuitionshock_perEnroll_real,
+         appropriationshock_perFTE_real,
+         tuitionshock_perFTE_real,
+         acceptance_rate,
+         completion_rate_150pct,
+         lecturer_prof_count,
+         lecturer_profoutlays_real,
+         lecturer_profmeansalary_real,
+         assistant_prof_count,
+         assistant_profoutlays_real,
+         assistant_profmeansalary_real,
+         full_prof_count,
+         full_profoutlays_real,
+         full_profmeansalary_real,
+         all_prof_count,
+         all_profoutlays_real,
+         all_profmeansalary_real,
+         nontenured_tenure_count,
+         tenuretrack_tenure_count,
+         tenured_tenure_count,
+         all_tenure_count,
+         lecturer_parttime_count,
+         assistant_parttime_count,
+         full_parttime_count,
+         lecturer_fulltime_count,
+         assistant_fulltime_count,
+         full_fulltime_count) %>%
+     arrange(unitid, year)
> 
> # Remove double observations created by the multiple merges.
> urban_ipeds.data <- urban_ipeds.data %>%
+     distinct(unitid, year, .keep_all = TRUE)
> 
> # Make year refer to the year of spring term, and not autumn of calendar year
> urban_ipeds.data <- urban_ipeds.data %>%
+     mutate(year = year + 1)
> 
> 
> ################################################################################
> ## Save the constructed data file.
> 
> # all unis
> urban_ipeds.data %>%
+     write_csv("../../data/urban-ipeds/urban-clean-allunis.csv")
> 
> # Only 4-year, public, non-forprofit unis
> urban_ipeds.data %>%
+     filter(fouryear == 1, public == 1, forprofit == 0) %>%
+     write_csv("../../data/urban-ipeds/urban-clean-publicunis.csv")
> 
> quit("no")
> proc.time()
   user  system elapsed 
 50.224   2.426  24.263 
